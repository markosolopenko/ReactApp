{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nexport const fetchCreatedProducts = createAsyncThunk(\"api/getCreatedProducts\", async () => {\n  return await getCreatedProducts();\n});\nexport const fetchCreatedProductsById = createAsyncThunk(\"api/getCreatedProductsById\", async id => {\n  return await getCreatedProductsById(id);\n});\nexport const formSlice = createSlice({\n  name: 'formSlice',\n  initialState: {\n    products: [],\n    productById: {},\n    error: null,\n    status: '',\n    formInitState: [],\n    editing: false\n  },\n  reducers: {\n    setForAddProduct(state) {\n      state.productById = {\n        name: '',\n        price: '',\n        origin: ''\n      };\n    },\n\n    setEditing(state) {\n      state.editing = !state.editing;\n    },\n\n    getPorductById(state, action) {\n      state.productById = state.products.filter(product => product._id === action.payload.id);\n    }\n\n  },\n  extraReducers: {\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n      state.error = null;\n    } // [fetchCreatedProductsById.fulfilled]: (state, action) => {\n    //     const {name, price, origin} = action.payload\n    //     state.status = 'succeeded'\n    //     state.productById = {name, price, origin}\n    //     state.error = null\n    // }\n\n  }\n});\nexport const {\n  setForAddProduct,\n  setEditingFalse,\n  setEditingTrue,\n  getPorductById\n} = formSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/formSlice.js"],"names":["createSlice","createAsyncThunk","getCreatedProducts","getCreatedProductsById","fetchCreatedProducts","fetchCreatedProductsById","id","formSlice","name","initialState","products","productById","error","status","formInitState","editing","reducers","setForAddProduct","state","price","origin","setEditing","getPorductById","action","filter","product","_id","payload","extraReducers","fulfilled","setEditingFalse","setEditingTrue","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,2BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAGH,gBAAgB,CAChD,wBADgD,EAEhD,YAAY;AACR,SAAO,MAAMC,kBAAkB,EAA/B;AACH,CAJ+C,CAA7C;AAMP,OAAO,MAAMG,wBAAwB,GAAGJ,gBAAgB,CACpD,4BADoD,EAEpD,MAAOK,EAAP,IAAc;AACV,SAAO,MAAMH,sBAAsB,CAACG,EAAD,CAAnC;AACH,CAJmD,CAAjD;AAOP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,WAAW,EAAE,EAFH;AAGVC,IAAAA,KAAK,EAAE,IAHG;AAIVC,IAAAA,MAAM,EAAE,EAJE;AAKVC,IAAAA,aAAa,EAAE,EALL;AAMVC,IAAAA,OAAO,EAAE;AANC,GAFmB;AAUjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACP,WAAN,GAAoB;AAACH,QAAAA,IAAI,EAAE,EAAP;AAAWW,QAAAA,KAAK,EAAE,EAAlB;AAAsBC,QAAAA,MAAM,EAAE;AAA9B,OAApB;AACH,KAHK;;AAINC,IAAAA,UAAU,CAACH,KAAD,EAAQ;AACdA,MAAAA,KAAK,CAACH,OAAN,GAAgB,CAACG,KAAK,CAACH,OAAvB;AACH,KANK;;AAONO,IAAAA,cAAc,CAACJ,KAAD,EAAQK,MAAR,EAAgB;AAC1BL,MAAAA,KAAK,CAACP,WAAN,GAAqBO,KAAK,CAACR,QAAN,CAAec,MAAf,CAAsBC,OAAO,IAC9CA,OAAO,CAACC,GAAR,KAAgBH,MAAM,CAACI,OAAP,CAAerB,EADd,CAArB;AAGH;;AAXK,GAVuB;AAuBjCsB,EAAAA,aAAa,EAAE;AACX,KAACxB,oBAAoB,CAACyB,SAAtB,GAAkC,CAACX,KAAD,EAAQK,MAAR,KAAmB;AACjDL,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACR,QAAN,GAAiBa,MAAM,CAACI,OAAxB;AACAT,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACH,KALU,CAMX;AACA;AACA;AACA;AACA;AACA;;AAXW;AAvBkB,CAAD,CAA7B;AAuCP,OAAO,MAAM;AACTK,EAAAA,gBADS;AAETa,EAAAA,eAFS;AAGTC,EAAAA,cAHS;AAITT,EAAAA;AAJS,IAKTf,SAAS,CAACyB,OALP","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\n\nexport const fetchCreatedProducts = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async () => {\n        return await getCreatedProducts()\n    }\n)\nexport const fetchCreatedProductsById = createAsyncThunk(\n    \"api/getCreatedProductsById\",\n    async (id) => {\n        return await getCreatedProductsById(id)\n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'formSlice',\n    initialState: {\n        products: [],\n        productById: {},\n        error: null,\n        status: '',\n        formInitState: [],\n        editing: false\n    },\n    reducers: {\n        setForAddProduct(state) {\n            state.productById = {name: '', price: '', origin: ''}\n        },\n        setEditing(state) {\n            state.editing = !state.editing\n        },\n        getPorductById(state, action) {\n            state.productById =  state.products.filter(product => \n                product._id === action.payload.id\n            )\n        }\n    },\n    extraReducers: {\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.products = action.payload\n            state.error = null\n        },\n        // [fetchCreatedProductsById.fulfilled]: (state, action) => {\n        //     const {name, price, origin} = action.payload\n        //     state.status = 'succeeded'\n        //     state.productById = {name, price, origin}\n        //     state.error = null\n        // }\n    }\n})\n\n\nexport const {\n    setForAddProduct, \n    setEditingFalse, \n    setEditingTrue,\n    getPorductById\n} = formSlice.actions\n\n"]},"metadata":{},"sourceType":"module"}