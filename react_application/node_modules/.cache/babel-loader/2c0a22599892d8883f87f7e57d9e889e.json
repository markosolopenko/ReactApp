{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nexport const fetchCreatedProducts = createAsyncThunk(\"api/getCreatedProducts\", async () => {\n  return await getCreatedProducts();\n});\nexport const fetchCreatedProductsById = createAsyncThunk(\"api/getCreatedProductsById\", async id => {\n  return await getCreatedProductsById(id);\n});\nexport const formSlice = createSlice({\n  name: 'formSlice',\n  initialState: {\n    products: [],\n    productById: {},\n    error: null,\n    status: ''\n  },\n  reducers: {\n    setForAddProduct(state) {\n      state.productById = {\n        name: '',\n        price: '',\n        origin: ''\n      };\n    }\n\n  },\n  extraReducers: {\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n      state.error = null;\n    },\n    [fetchCreatedProductsById.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.productById = {\n        name: action.payload.name,\n        price: action.payload.price,\n        origin: action.payload.origin\n      };\n      state.error = null;\n    }\n  }\n});\nexport const {\n  setForAddProduct\n} = formSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/formSlice.js"],"names":["createSlice","createAsyncThunk","getCreatedProducts","getCreatedProductsById","fetchCreatedProducts","fetchCreatedProductsById","id","formSlice","name","initialState","products","productById","error","status","reducers","setForAddProduct","state","price","origin","extraReducers","fulfilled","action","payload","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,2BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAGH,gBAAgB,CAChD,wBADgD,EAEhD,YAAY;AACR,SAAO,MAAMC,kBAAkB,EAA/B;AACH,CAJ+C,CAA7C;AAMP,OAAO,MAAMG,wBAAwB,GAAGJ,gBAAgB,CACpD,4BADoD,EAEpD,MAAOK,EAAP,IAAc;AACV,SAAO,MAAMH,sBAAsB,CAACG,EAAD,CAAnC;AACH,CAJmD,CAAjD;AAOP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,WAAW,EAAE,EAFH;AAGVC,IAAAA,KAAK,EAAE,IAHG;AAIVC,IAAAA,MAAM,EAAE;AAJE,GAFmB;AAQjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACL,WAAN,GAAoB;AAACH,QAAAA,IAAI,EAAE,EAAP;AAAWS,QAAAA,KAAK,EAAE,EAAlB;AAAsBC,QAAAA,MAAM,EAAE;AAA9B,OAApB;AACH;;AAHK,GARuB;AAajCC,EAAAA,aAAa,EAAE;AACX,KAACf,oBAAoB,CAACgB,SAAtB,GAAkC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;AACjDL,MAAAA,KAAK,CAACH,MAAN,GAAe,WAAf;AACAG,MAAAA,KAAK,CAACN,QAAN,GAAiBW,MAAM,CAACC,OAAxB;AACAN,MAAAA,KAAK,CAACJ,KAAN,GAAc,IAAd;AACH,KALU;AAMX,KAACP,wBAAwB,CAACe,SAA1B,GAAsC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;AACrDL,MAAAA,KAAK,CAACH,MAAN,GAAe,WAAf;AACAG,MAAAA,KAAK,CAACL,WAAN,GAAoB;AAChBH,QAAAA,IAAI,EAAEa,MAAM,CAACC,OAAP,CAAed,IADL;AAEhBS,QAAAA,KAAK,EAAEI,MAAM,CAACC,OAAP,CAAeL,KAFN;AAGhBC,QAAAA,MAAM,EAAEG,MAAM,CAACC,OAAP,CAAeJ;AAHP,OAApB;AAKAF,MAAAA,KAAK,CAACJ,KAAN,GAAc,IAAd;AACH;AAdU;AAbkB,CAAD,CAA7B;AAgCP,OAAO,MAAM;AAACG,EAAAA;AAAD,IAAqBR,SAAS,CAACgB,OAArC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\n\nexport const fetchCreatedProducts = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async () => {\n        return await getCreatedProducts()\n    }\n)\nexport const fetchCreatedProductsById = createAsyncThunk(\n    \"api/getCreatedProductsById\",\n    async (id) => {\n        return await getCreatedProductsById(id)\n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'formSlice',\n    initialState: {\n        products: [],\n        productById: {},\n        error: null,\n        status: '',\n    },\n    reducers: {\n        setForAddProduct(state) {\n            state.productById = {name: '', price: '', origin: ''}\n        }\n    },\n    extraReducers: {\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.products = action.payload\n            state.error = null\n        },\n        [fetchCreatedProductsById.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.productById = {\n                name: action.payload.name,\n                price: action.payload.price,\n                origin: action.payload.origin\n            }\n            state.error = null\n        }\n    }\n})\n\n\nexport const {setForAddProduct} = formSlice.actions\n\n"]},"metadata":{},"sourceType":"module"}