{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { act } from 'react-dom/test-utils';\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState: {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {},\n    cartPageProducts: [],\n    cartPageSetProducts: []\n  },\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      console.log(action.payload.count);\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload.product;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      console.log(typeof action.payload.count);\n\n      if (action.payload.count) {\n        state.amountAddedProducts = action.payload.count;\n      } else {\n        state.amountAddedProducts = 0;\n      }\n\n      state.sumOfPricesAddedProducts = action.payload.price;\n    }\n\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  setProductToDetailsPage,\n  addProductsToCartPage,\n  addProductsToCartPageSet,\n  decreaseProductFromDetails,\n  deleteProductFromCart,\n  subtractProductFromCart,\n  subtractFromAddedProducts,\n  takesDataFromInput\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createSlice","act","productsSlice","name","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","reducers","countGenerallyAddedProducts","state","action","console","log","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,GAAT,QAAoB,sBAApB;AAGA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACrCG,EAAAA,IAAI,EAAE,eAD+B;AAErCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,mBAAmB,EAAE,CADX;AAEVC,IAAAA,wBAAwB,EAAE,CAFhB;AAGVC,IAAAA,OAAO,EAAE,EAHC;AAIVC,IAAAA,gBAAgB,EAAE,EAJR;AAKVC,IAAAA,mBAAmB,EAAE;AALX,GAFuB;AASrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,2BAA2B,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAP,CAAeC,KAA3B;AACAL,MAAAA,KAAK,CAACP,mBAAN,IAA6BQ,MAAM,CAACG,OAAP,CAAeC,KAA5C;AACAL,MAAAA,KAAK,CAACN,wBAAN,IAAkCO,MAAM,CAACG,OAAP,CAAeE,KAAjD;AACH,KALK;;AAMNC,IAAAA,uBAAuB,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACnCD,MAAAA,KAAK,CAACL,OAAN,GAAgBM,MAAM,CAACG,OAAP,CAAeT,OAA/B;AACH,KARK;;AASNa,IAAAA,qBAAqB,CAACR,KAAD,EAAQC,MAAR,EAAgB;AACjCD,MAAAA,KAAK,CAACJ,gBAAN,GAAyB,CAAC,GAAGI,KAAK,CAACJ,gBAAV,EAA4B,GAAGK,MAAM,CAACG,OAAP,CAAeK,KAA9C,CAAzB;AACH,KAXK;;AAYNC,IAAAA,wBAAwB,CAACV,KAAD,EAAQC,MAAR,EAAgB;AACpCD,MAAAA,KAAK,CAACH,mBAAN,GAA6B,CAAC,GAAGG,KAAK,CAACH,mBAAV,EAA+BI,MAAM,CAACG,OAAP,CAAeT,OAA9C,CAA7B;AACH,KAdK;;AAeNgB,IAAAA,0BAA0B,CAACX,KAAD,EAAQ;AAC9BA,MAAAA,KAAK,CAACJ,gBAAN,CAAuBgB,KAAvB,CAA6B,CAA7B,EAAgCZ,KAAK,CAACJ,gBAAN,CAAuBiB,MAAvB,GAAgC,CAAhE;AACH,KAjBK;;AAkBNC,IAAAA,qBAAqB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAM;AAAEc,QAAAA;AAAF,UAASd,MAAM,CAACG,OAAtB;AACAJ,MAAAA,KAAK,CAACH,mBAAN,GAA4BG,KAAK,CAACH,mBAAN,CAA0BmB,MAA1B,CAAiCrB,OAAO,IAAIA,OAAO,CAACoB,EAAR,KAAeA,EAA3D,CAA5B;AACAf,MAAAA,KAAK,CAACJ,gBAAN,GAAyBI,KAAK,CAACJ,gBAAN,CAAuBoB,MAAvB,CAA8BrB,OAAO,IAAIA,OAAO,CAACoB,EAAR,KAAeA,EAAxD,CAAzB;AACH,KAtBK;;AAuBNE,IAAAA,uBAAuB,CAACjB,KAAD,EAAQC,MAAR,EAAgB;AACnCD,MAAAA,KAAK,CAACJ,gBAAN,CAAuBsB,MAAvB,CAA8BjB,MAAM,CAACG,OAAP,CAAee,KAA7C,EAAoD,CAApD;AACH,KAzBK;;AA0BNC,IAAAA,yBAAyB,CAACpB,KAAD,EAAQC,MAAR,EAAgB;AACrCD,MAAAA,KAAK,CAACP,mBAAN,IAA6BQ,MAAM,CAACG,OAAP,CAAeC,KAA5C;AACAL,MAAAA,KAAK,CAACN,wBAAN,IAAkCO,MAAM,CAACG,OAAP,CAAeE,KAAjD;AACH,KA7BK;;AA8BNe,IAAAA,kBAAkB,CAACrB,KAAD,EAAQC,MAAR,EAAgB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,MAAM,CAACG,OAAP,CAAeC,KAAlC;;AACA,UAAGJ,MAAM,CAACG,OAAP,CAAeC,KAAlB,EAAyB;AACrBL,QAAAA,KAAK,CAACP,mBAAN,GAA4BQ,MAAM,CAACG,OAAP,CAAeC,KAA3C;AACH,OAFD,MAEM;AACFL,QAAAA,KAAK,CAACP,mBAAN,GAA4B,CAA5B;AACH;;AACDO,MAAAA,KAAK,CAACN,wBAAN,GAAiCO,MAAM,CAACG,OAAP,CAAeE,KAAhD;AAEH;;AAvCK;AAT2B,CAAD,CAAjC;AAoDP,OAAO,MAAM;AACTP,EAAAA,2BADS;AAETQ,EAAAA,uBAFS;AAGTC,EAAAA,qBAHS;AAITE,EAAAA,wBAJS;AAKTC,EAAAA,0BALS;AAMTG,EAAAA,qBANS;AAOTG,EAAAA,uBAPS;AAQTG,EAAAA,yBARS;AASTC,EAAAA;AATS,IAUG/B,aAAa,CAACgC,OAVvB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { act } from 'react-dom/test-utils';\n\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState: {\n        amountAddedProducts: 0,\n        sumOfPricesAddedProducts: 0,\n        product: {}, \n        cartPageProducts: [],\n        cartPageSetProducts: [],\n    }, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            console.log(action.payload.count)\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload.product\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id)\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            console.log(typeof action.payload.count)\n            if(action.payload.count) {\n                state.amountAddedProducts = action.payload.count\n            }else {\n                state.amountAddedProducts = 0\n            }\n            state.sumOfPricesAddedProducts = action.payload.price\n            \n        }\n    }\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    setProductToDetailsPage,\n    addProductsToCartPage,\n    addProductsToCartPageSet,\n    decreaseProductFromDetails,\n    deleteProductFromCart ,\n    subtractProductFromCart,\n    subtractFromAddedProducts,\n    takesDataFromInput\n            } = productsSlice.actions"]},"metadata":{},"sourceType":"module"}