{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\nexport const fetchProducts = createAsyncThunk(\"api/getProducts\", async ({\n  page,\n  perPage,\n  origins,\n  minPrice,\n  maxPrice\n}) => {\n  return await getProducts({\n    page,\n    perPage,\n    origins,\n    minPrice,\n    maxPrice\n  });\n});\nconst initialState = {\n  amountAddedProducts: 0,\n  sumOfPricesAddedProducts: 0,\n  product: {},\n  cartPageProducts: [],\n  cartPageSetProducts: [],\n  status: '',\n  error: null,\n  totalItems: 0,\n  page: 1,\n  initialItems: [],\n  products: [],\n  productsToShow: [],\n  origins: [],\n  perPage: '',\n  range: 1,\n  pricesMinMax: {\n    min: 0,\n    max: 0\n  }\n};\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState,\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload.product;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      const {\n        count,\n        price\n      } = action.payload;\n\n      if (action.payload.count) {\n        state.amountAddedProducts += count;\n        state.sumOfPricesAddedProducts += price;\n      }\n    },\n\n    productsPerPage(state, action) {\n      state.perPage = action.payload.number;\n    },\n\n    setOrigin(state, action) {\n      const {\n        origin\n      } = action.payload;\n\n      if (state.origins.includes(origin)) {\n        state.origins = state.origins.filter(el => el !== origin);\n      } else {\n        state.origins.push(origin);\n      }\n    },\n\n    setMinMaxPrice(state, action) {\n      const {\n        min,\n        max\n      } = action.payload;\n      state.pricesMinMax = { ...state.pricesMinMax,\n        [state.pricesMinMax.min]: min\n      };\n      state.pricesMinMax = { ...state.pricesMinMax,\n        max: max\n      };\n    },\n\n    setPage(state, action) {\n      state.page = action.payload.page;\n    },\n\n    setRange(state) {\n      state.range = Math.ceil(state.totalItems / state.perPage);\n      state.page = 1;\n    },\n\n    handleArrowBack(state) {\n      state.page -= 1;\n    },\n\n    handleArrowForward(state) {\n      state.page += 1;\n    },\n\n    setPriceOfSpecificProducts(state, action) {\n      state.cartPageSetProducts = action.payload.totalSum;\n    },\n\n    handleOrderEvent(state) {\n      state.amountAddedProducts = 0;\n      state.sumOfPricesAddedProducts = 0;\n      state.cartPageProducts = [];\n      state.cartPageSetProducts = [];\n    }\n\n  },\n  extraReducers: {\n    [fetchProducts.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      const {\n        totalItems,\n        items\n      } = action.payload;\n      state.totalItems = totalItems;\n      state.products = items;\n      state.status = 'succeeded';\n      state.error = undefined;\n      state.initialItems = items;\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  setProductToDetailsPage,\n  addProductsToCartPage,\n  addProductsToCartPageSet,\n  decreaseProductFromDetails,\n  deleteProductFromCart,\n  subtractProductFromCart,\n  subtractFromAddedProducts,\n  takesDataFromInput,\n  setPage,\n  productsPerPage,\n  setRange,\n  handleArrowBack,\n  handleArrowForward,\n  setPriceOfSpecificProducts,\n  handleOrderEvent,\n  setOrigin,\n  setMinMaxPrice\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createAsyncThunk","createSlice","getProducts","fetchProducts","page","perPage","origins","minPrice","maxPrice","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","status","error","totalItems","initialItems","products","productsToShow","range","pricesMinMax","min","max","productsSlice","name","reducers","countGenerallyAddedProducts","state","action","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","productsPerPage","number","setOrigin","origin","includes","el","push","setMinMaxPrice","setPage","setRange","Math","ceil","handleArrowBack","handleArrowForward","setPriceOfSpecificProducts","totalSum","handleOrderEvent","extraReducers","pending","fulfilled","items","undefined","rejected","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\n\n\nexport const fetchProducts = createAsyncThunk(\n    \"api/getProducts\",\n    async ({page, perPage, origins, minPrice, maxPrice}) => {\n        return await getProducts({page, perPage, origins, minPrice, maxPrice})\n    } \n)\n\nconst initialState = {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {}, \n    cartPageProducts: [],\n    cartPageSetProducts: [],\n    status: '',\n    error: null,\n    totalItems: 0,\n    page: 1,\n    initialItems: [],\n    products: [],\n    productsToShow: [],\n    origins: [],\n    perPage: '',\n    range: 1,\n    pricesMinMax: {min: 0, max: 0}\n}\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload.product\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id)\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            const { count, price } = action.payload\n            if(action.payload.count) {\n                state.amountAddedProducts += count\n                state.sumOfPricesAddedProducts += price\n            }    \n        },\n        productsPerPage(state, action) {\n            state.perPage = action.payload.number\n        },\n        setOrigin(state, action) {\n            const {origin} = action.payload\n            if(state.origins.includes(origin)) {\n                state.origins = state.origins.filter(el => el !== origin)\n            }else {\n                state.origins.push(origin)\n            }\n            \n        },\n        setMinMaxPrice(state, action) {\n            const {min, max} = action.payload\n            state.pricesMinMax = {...state.pricesMinMax, [state.pricesMinMax.min]: min} \n            state.pricesMinMax = {...state.pricesMinMax, max: max}\n        },\n        setPage(state, action) {\n            state.page = action.payload.page\n        },\n        setRange(state) {\n            state.range = Math.ceil(state.totalItems / state.perPage)\n            state.page = 1\n        },\n        handleArrowBack(state) {\n            state.page -= 1\n        },\n        handleArrowForward(state) {\n            state.page += 1\n        },\n        setPriceOfSpecificProducts(state, action) {\n            state.cartPageSetProducts = action.payload.totalSum \n        },\n        handleOrderEvent(state) {\n            state.amountAddedProducts = 0\n            state.sumOfPricesAddedProducts = 0\n            state.cartPageProducts = []\n            state.cartPageSetProducts = []\n        }\n    },\n    extraReducers: {\n        [fetchProducts.pending]: (state) => {\n            state.status = 'loading'\n        },\n        [fetchProducts.fulfilled]: (state, action) => {\n            const { totalItems, items } = action.payload    \n            state.totalItems = totalItems\n            state.products = items\n            state.status = 'succeeded'\n            state.error = undefined\n            state.initialItems = items\n        },\n        [fetchProducts.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.payload\n        },\n    }\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    setProductToDetailsPage,\n    addProductsToCartPage,\n    addProductsToCartPageSet,\n    decreaseProductFromDetails,\n    deleteProductFromCart,\n    subtractProductFromCart,\n    subtractFromAddedProducts,\n    takesDataFromInput,\n    setPage,\n    productsPerPage,\n    setRange,\n    handleArrowBack,\n    handleArrowForward,\n    setPriceOfSpecificProducts,\n    handleOrderEvent,\n    setOrigin,\n    setMinMaxPrice\n\n} = productsSlice.actions"]},"metadata":{},"sourceType":"module"}