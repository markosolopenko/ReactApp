{"ast":null,"code":"import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { getProducts } from '../api/getProducts';\nimport { fetchProducts, loadData } from '../features/productsSlice';\n\nfunction* workerFetchProducts() {\n  const store = state => state;\n\n  const {\n    productsSlice\n  } = yield select(store);\n  const {\n    page,\n    perPage,\n    origins,\n    minPrice,\n    maxPrice\n  } = productsSlice;\n  const data = yield call(getProducts, page, perPage, '', minPrice, maxPrice);\n  yield put(fetchProducts(data));\n}\n\nexport function* watchFetchProducts() {\n  yield takeEvery(loadData.type, workerFetchProducts);\n}","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_application/src/redux-saga/productsSaga.js"],"names":["call","put","select","takeEvery","getProducts","fetchProducts","loadData","workerFetchProducts","store","state","productsSlice","page","perPage","origins","minPrice","maxPrice","data","watchFetchProducts","type"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,2BAAxC;;AAGA,UAAUC,mBAAV,GAAgC;AAC5B,QAAMC,KAAK,GAAIC,KAAD,IAAWA,KAAzB;;AACA,QAAM;AAACC,IAAAA;AAAD,MAAkB,MAAMR,MAAM,CAACM,KAAD,CAApC;AACA,QAAM;AAACG,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,MAA+CL,aAArD;AACA,QAAMM,IAAI,GAAG,MAAMhB,IAAI,CAACI,WAAD,EAAcO,IAAd,EAAoBC,OAApB,EAA6B,EAA7B,EAAiCE,QAAjC,EAA2CC,QAA3C,CAAvB;AACA,QAAMd,GAAG,CAACI,aAAa,CAACW,IAAD,CAAd,CAAT;AACH;;AAED,OAAO,UAAUC,kBAAV,GAA+B;AAClC,QAAMd,SAAS,CAACG,QAAQ,CAACY,IAAV,EAAgBX,mBAAhB,CAAf;AACH","sourcesContent":["import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { getProducts } from '../api/getProducts';\nimport { fetchProducts, loadData } from '../features/productsSlice';\n\n\nfunction* workerFetchProducts() {\n    const store = (state) => state;\n    const {productsSlice} = yield select(store);\n    const {page, perPage, origins, minPrice, maxPrice} = productsSlice;\n    const data = yield call(getProducts, page, perPage, '', minPrice, maxPrice);\n    yield put(fetchProducts(data));\n}\n\nexport function* watchFetchProducts() {\n    yield takeEvery(loadData.type, workerFetchProducts);\n}\n"]},"metadata":{},"sourceType":"module"}