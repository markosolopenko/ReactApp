{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\nexport const fetchProducts = createAsyncThunk(\"api/getProducts\", async ({\n  page,\n  perPage,\n  origin\n}) => {\n  return await getProducts({\n    page,\n    perPage,\n    origin\n  });\n});\nconst initialState = {\n  amountAddedProducts: 0,\n  sumOfPricesAddedProducts: 0,\n  product: {},\n  cartPageProducts: [],\n  cartPageSetProducts: [],\n  status: '',\n  error: null,\n  totalItems: 0,\n  page: 1,\n  initialItems: [],\n  products: [],\n  productsToShow: [],\n  origins: [],\n  perPage: '',\n  range: 1,\n  currPage: [],\n  priceOfSpecificProducts: 0\n};\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState,\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload.product;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      const {\n        count,\n        price\n      } = action.payload;\n\n      if (action.payload.count) {\n        state.amountAddedProducts += count;\n        state.sumOfPricesAddedProducts += price;\n      }\n    },\n\n    productsPerPage(state, action) {\n      state.perPage = action.payload.number;\n    },\n\n    showProductsByPrices(state, action) {\n      const {\n        min,\n        max\n      } = action.payload;\n      if (state.products.length === 0) state.products = state.initialItems.filter(product => Number(product.price) >= Number(min) && Number(product.price) <= Number(max));else {\n        state.products = state.initialItems.filter(product => state.products.includes(product) && Number(product.price) >= Number(min) && Number(product.price) <= Number(max));\n      }\n\n      if (min === 0 && max === 0) {\n        if (parseInt(state.perPage)) {\n          let indexOfLast = state.page * state.perPage;\n          let indexOfFirst = indexOfLast - Number(state.perPage);\n          state.products = state.initialItems.slice(indexOfFirst, indexOfLast);\n        } else {\n          state.products = state.initialItems;\n        }\n      }\n    },\n\n    showSelectedOrigins(state, action) {\n      const {\n        checked,\n        origin\n      } = action.payload;\n\n      if (checked === true) {\n        state.products = state.initialItems.filter(product => product.origin === origin);\n        state.productsToShow = [...state.productsToShow, ...state.products];\n        state.products = state.productsToShow;\n      }\n\n      if (checked === false) {\n        if (!parseInt(state.perPage)) {\n          state.products = state.products.filter(product => product.origin !== origin);\n          state.productsToShow = state.products;\n        } else {\n          let indexOfLast = state.page * state.perPage;\n          let indexOfFirst = indexOfLast - Number(state.perPage);\n          state.products = state.initialItems.slice(indexOfFirst, indexOfLast);\n        }\n\n        state.productsToShow = state.products;\n      }\n\n      if (state.products.length === 0) {\n        if (parseInt(state.perPage)) {\n          let indexOfLast = state.page * state.perPage;\n          let indexOfFirst = indexOfLast - Number(state.perPage);\n          state.products = state.initialItems.slice(indexOfFirst, indexOfLast);\n        } else {\n          state.products = state.initialItems;\n        }\n      }\n    },\n\n    setPage(state, action) {\n      state.page = action.payload.page;\n    },\n\n    setRange(state) {\n      state.range = Math.ceil(state.totalItems / state.perPage);\n      state.page = 1;\n    },\n\n    handleArrowBack(state) {\n      state.page -= 1;\n    },\n\n    handleArrowForward(state) {\n      state.page += 1;\n    },\n\n    setPriceOfSpecificProducts(state, action) {\n      state.cartPageSetProducts = action.payload.totalSum;\n    },\n\n    handleOrderEvent(state) {\n      state.amountAddedProducts = 0;\n      state.sumOfPricesAddedProducts = 0;\n      state.cartPageProducts = [];\n      state.cartPageSetProducts = [];\n    }\n\n  },\n  extraReducers: {\n    [fetchProducts.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      const {\n        totalItems,\n        items\n      } = action.payload;\n      state.totalItems = totalItems;\n      state.products = items;\n      state.status = 'succeeded';\n      state.error = undefined;\n      state.initialItems = items;\n      items.forEach(product => !state.origins.includes(product.origin) ? state.origins.push(product.origin) : null);\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  setProductToDetailsPage,\n  addProductsToCartPage,\n  addProductsToCartPageSet,\n  decreaseProductFromDetails,\n  deleteProductFromCart,\n  subtractProductFromCart,\n  subtractFromAddedProducts,\n  takesDataFromInput,\n  handleCheckbox,\n  showSelectedOrigins,\n  showProductsByPrices,\n  showSelectedNumberProductsPerPage,\n  setPage,\n  productsPerPage,\n  setRange,\n  handleArrowBack,\n  handleArrowForward,\n  movingSlider,\n  setPriceOfSpecificProducts,\n  handleOrderEvent\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createAsyncThunk","createSlice","getProducts","fetchProducts","page","perPage","origin","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","status","error","totalItems","initialItems","products","productsToShow","origins","range","currPage","priceOfSpecificProducts","productsSlice","name","reducers","countGenerallyAddedProducts","state","action","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","productsPerPage","number","showProductsByPrices","min","max","Number","includes","parseInt","indexOfLast","indexOfFirst","showSelectedOrigins","checked","setPage","setRange","Math","ceil","handleArrowBack","handleArrowForward","setPriceOfSpecificProducts","totalSum","handleOrderEvent","extraReducers","pending","fulfilled","items","undefined","forEach","push","rejected","handleCheckbox","showSelectedNumberProductsPerPage","movingSlider","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\n\n\nexport const fetchProducts = createAsyncThunk(\n    \"api/getProducts\",\n    async ({page, perPage, origin}) => {\n        return await getProducts({page, perPage, origin})\n    } \n)\n\nconst initialState = {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {}, \n    cartPageProducts: [],\n    cartPageSetProducts: [],\n    status: '',\n    error: null,\n    totalItems: 0,\n    page: 1,\n    initialItems: [],\n    products: [],\n    productsToShow: [],\n    origins: [],\n    perPage: '',\n    range: 1,\n    currPage: [],\n    priceOfSpecificProducts: 0\n}\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload.product\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id)\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            const { count, price } = action.payload\n            if(action.payload.count) {\n                state.amountAddedProducts += count\n                state.sumOfPricesAddedProducts += price\n            }    \n        },\n        productsPerPage(state, action) {\n            state.perPage = action.payload.number\n            \n        },\n        showProductsByPrices(state, action) {\n            const {min, max} = action.payload\n            if(state.products.length === 0)\n                state.products = state.initialItems.filter(product => \n                    Number(product.price) >= Number(min) && \n                    Number(product.price) <= Number(max))\n            else {\n                state.products = state.initialItems.filter(product => \n                    state.products.includes(product) &&\n                    Number(product.price) >= Number(min) && \n                    Number(product.price) <= Number(max))\n            }\n            if(min === 0 && max === 0) {\n                if(parseInt(state.perPage)) {\n                    let indexOfLast = state.page * state.perPage\n                    let indexOfFirst = indexOfLast - Number(state.perPage)\n                    state.products = state.initialItems.slice(indexOfFirst, indexOfLast) \n                }else {\n                    state.products = state.initialItems\n                }\n                \n            }\n        },\n        showSelectedOrigins(state, action) {\n            const { checked, origin } = action.payload\n            if(checked === true) {\n                state.products = state.initialItems.filter(product => \n                    product.origin === origin\n                )\n                state.productsToShow = [...state.productsToShow, ...state.products]\n                state.products = state.productsToShow\n            }\n            if(checked === false) {\n                if(!parseInt(state.perPage)) {\n                    state.products = state.products.filter(product => \n                        product.origin !== origin\n                    )\n                    state.productsToShow = state.products\n                }else {\n                    let indexOfLast = state.page * state.perPage\n                    let indexOfFirst = indexOfLast - Number(state.perPage)\n                    state.products = state.initialItems.slice(indexOfFirst, indexOfLast)\n                }\n                state.productsToShow = state.products\n                \n            }\n            if (state.products.length === 0) {\n                if(parseInt(state.perPage)) {\n                    let indexOfLast = state.page * state.perPage\n                    let indexOfFirst = indexOfLast - Number(state.perPage)\n                    state.products = state.initialItems.slice(indexOfFirst, indexOfLast)\n                }else {\n                    state.products = state.initialItems\n                }\n                \n            }\n        },\n        setPage(state, action) {\n            state.page = action.payload.page\n        },\n        setRange(state) {\n            state.range = Math.ceil(state.totalItems / state.perPage)\n            state.page = 1\n        },\n        handleArrowBack(state) {\n            state.page -= 1\n        },\n        handleArrowForward(state) {\n            state.page += 1\n        },\n        setPriceOfSpecificProducts(state, action) {\n            state.cartPageSetProducts = action.payload.totalSum \n        },\n        handleOrderEvent(state) {\n            state.amountAddedProducts = 0\n            state.sumOfPricesAddedProducts = 0\n            state.cartPageProducts = []\n            state.cartPageSetProducts = []\n        }\n    },\n    extraReducers: {\n        [fetchProducts.pending]: (state) => {\n            state.status = 'loading'\n        },\n        [fetchProducts.fulfilled]: (state, action) => {\n            const { totalItems, items } = action.payload    \n            state.totalItems = totalItems\n            state.products = items\n            state.status = 'succeeded'\n            state.error = undefined\n            state.initialItems = items\n            items.forEach(product => \n                !state.origins.includes(product.origin) ? state.origins.push(product.origin): null)\n        },\n        [fetchProducts.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.payload\n        },\n    }\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    setProductToDetailsPage,\n    addProductsToCartPage,\n    addProductsToCartPageSet,\n    decreaseProductFromDetails,\n    deleteProductFromCart ,\n    subtractProductFromCart,\n    subtractFromAddedProducts,\n    takesDataFromInput,\n    handleCheckbox,\n    showSelectedOrigins,\n    showProductsByPrices,\n    showSelectedNumberProductsPerPage,\n    setPage,\n    productsPerPage,\n    setRange,\n    handleArrowBack,\n    handleArrowForward,\n    movingSlider,\n    setPriceOfSpecificProducts,\n    handleOrderEvent\n\n} = productsSlice.actions"]},"metadata":{},"sourceType":"module"}