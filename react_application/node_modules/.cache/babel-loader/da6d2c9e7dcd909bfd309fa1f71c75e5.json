{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\nexport const fetchProducts = createAsyncThunk(\"api/getProducts\", async () => {\n  return await getProducts();\n});\nconst initialState = {\n  amountAddedProducts: 0,\n  sumOfPricesAddedProducts: 0,\n  product: {},\n  cartPageProducts: [],\n  cartPageSetProducts: [],\n  status: '',\n  error: null,\n  products: [],\n  totalItems: 0,\n  page: 0,\n  origins: []\n};\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState,\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload.product;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      const {\n        count,\n        price\n      } = action.payload;\n\n      if (action.payload.count) {\n        state.amountAddedProducts += count;\n        state.sumOfPricesAddedProducts += price;\n      }\n    },\n\n    handleCheckbox(state, action) {\n      state.origins.forEach(arr => action.payload.name === arr[0] ? [...arr, arr[1] = !arr[1]] : null);\n    }\n\n  },\n  extraReducers: {\n    [fetchProducts.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      const {\n        totalItems,\n        items,\n        page\n      } = action.payload;\n      const mapArray = new Map();\n      state.products = items;\n      state.page = page;\n      state.totalItems = totalItems;\n      state.status = 'succeeded';\n      state.error = undefined;\n      items.forEach(product => !mapArray.has(product.origin) ? mapArray.set(product.origin, false) : null);\n      state.origins = [...mapArray];\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  setProductToDetailsPage,\n  addProductsToCartPage,\n  addProductsToCartPageSet,\n  decreaseProductFromDetails,\n  deleteProductFromCart,\n  subtractProductFromCart,\n  subtractFromAddedProducts,\n  takesDataFromInput,\n  handleCheckbox\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createAsyncThunk","createSlice","getProducts","fetchProducts","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","status","error","products","totalItems","page","origins","productsSlice","name","reducers","countGenerallyAddedProducts","state","action","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","handleCheckbox","forEach","arr","extraReducers","pending","fulfilled","items","mapArray","Map","undefined","has","origin","set","rejected","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\n\n\nexport const fetchProducts = createAsyncThunk(\n    \"api/getProducts\",\n    async () => {\n        return await getProducts()\n    } \n)\n\n\nconst initialState = {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {}, \n    cartPageProducts: [],\n    cartPageSetProducts: [],\n    status: '',\n    error: null,\n    products: [],\n    totalItems: 0,\n    page: 0,\n    origins: [],\n}\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload.product\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id)\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            const { count, price } = action.payload\n            if(action.payload.count) {\n                state.amountAddedProducts += count\n                state.sumOfPricesAddedProducts += price\n            }    \n        },\n        handleCheckbox(state, action) {\n            state.origins.forEach(arr => \n                action.payload.name === arr[0] ? [...arr, \n                    arr[1] = !arr[1]] : null     \n            )\n        },\n    },\n    extraReducers: {\n        [fetchProducts.pending]: (state) => {\n            state.status = 'loading'\n        },\n        [fetchProducts.fulfilled]: (state, action) => {\n            const { totalItems, items, page } = action.payload \n            const mapArray = new Map()\n            state.products = items\n            state.page = page\n            state.totalItems = totalItems\n            state.status = 'succeeded'\n            state.error = undefined\n            items.forEach(product => \n                !mapArray.has(product.origin) \n                    ? mapArray.set(product.origin, false)\n                    : null     \n            )\n            state.origins = [...mapArray]\n        },\n        [fetchProducts.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.payload\n        },\n    }\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    setProductToDetailsPage,\n    addProductsToCartPage,\n    addProductsToCartPageSet,\n    decreaseProductFromDetails,\n    deleteProductFromCart ,\n    subtractProductFromCart,\n    subtractFromAddedProducts,\n    takesDataFromInput,\n    handleCheckbox\n\n} = productsSlice.actions"]},"metadata":{},"sourceType":"module"}