{"ast":null,"code":"import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { getProducts, getProdcutById } from '../api/getProducts';\nimport { fetchProducts, loadData, setProductId, setProductToDetailsPage } from '../features/productsSlice';\n\nfunction* sagaFetchProducts() {\n  const store = state => state;\n\n  const {\n    productsSlice\n  } = yield select(store);\n  const {\n    page,\n    perPage,\n    origins,\n    minPrice,\n    maxPrice\n  } = productsSlice;\n  const data = yield call(getProducts, page, perPage, origins, minPrice, maxPrice);\n  yield put(fetchProducts(data.items));\n}\n\nfunction* sagaFetchProductById() {\n  const store = state => state;\n\n  const {\n    productsSlice\n  } = yield select(store);\n  const {\n    productId\n  } = productsSlice;\n  const data = yield call(getProdcutById, productId);\n  yield put(setProductToDetailsPage(data));\n}\n\nexport function* watchFetchProducts() {\n  yield takeEvery(loadData.type, sagaFetchProducts);\n  yield takeEvery(loadData.type, sagaFetchProductById);\n}","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_application/src/redux-saga/productsSaga.js"],"names":["call","put","select","takeEvery","getProducts","getProdcutById","fetchProducts","loadData","setProductId","setProductToDetailsPage","sagaFetchProducts","store","state","productsSlice","page","perPage","origins","minPrice","maxPrice","data","items","sagaFetchProductById","productId","watchFetchProducts","type"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,oBAA5C;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,uBAAhD,QAA+E,2BAA/E;;AAGA,UAAUC,iBAAV,GAA8B;AAC1B,QAAMC,KAAK,GAAIC,KAAD,IAAWA,KAAzB;;AACA,QAAM;AAACC,IAAAA;AAAD,MAAkB,MAAMX,MAAM,CAACS,KAAD,CAApC;AACA,QAAM;AAACG,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,MAA+CL,aAArD;AACA,QAAMM,IAAI,GAAG,MAAMnB,IAAI,CAACI,WAAD,EAAcU,IAAd,EAAoBC,OAApB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDC,QAAhD,CAAvB;AACA,QAAMjB,GAAG,CAACK,aAAa,CAACa,IAAI,CAACC,KAAN,CAAd,CAAT;AACH;;AACD,UAAUC,oBAAV,GAAiC;AAC7B,QAAMV,KAAK,GAAIC,KAAD,IAAWA,KAAzB;;AACA,QAAM;AAACC,IAAAA;AAAD,MAAkB,MAAMX,MAAM,CAACS,KAAD,CAApC;AACA,QAAM;AAACW,IAAAA;AAAD,MAAcT,aAApB;AACA,QAAMM,IAAI,GAAG,MAAMnB,IAAI,CAACK,cAAD,EAAiBiB,SAAjB,CAAvB;AACA,QAAMrB,GAAG,CAACQ,uBAAuB,CAACU,IAAD,CAAxB,CAAT;AACH;;AAED,OAAO,UAAUI,kBAAV,GAA+B;AAClC,QAAMpB,SAAS,CAACI,QAAQ,CAACiB,IAAV,EAAgBd,iBAAhB,CAAf;AACA,QAAMP,SAAS,CAACI,QAAQ,CAACiB,IAAV,EAAgBH,oBAAhB,CAAf;AACH","sourcesContent":["import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { getProducts, getProdcutById } from '../api/getProducts';\nimport { fetchProducts, loadData, setProductId, setProductToDetailsPage } from '../features/productsSlice';\n\n\nfunction* sagaFetchProducts() {\n    const store = (state) => state;\n    const {productsSlice} = yield select(store);\n    const {page, perPage, origins, minPrice, maxPrice} = productsSlice;\n    const data = yield call(getProducts, page, perPage, origins, minPrice, maxPrice);\n    yield put(fetchProducts(data.items));\n}\nfunction* sagaFetchProductById() {\n    const store = (state) => state;\n    const {productsSlice} = yield select(store);\n    const {productId} = productsSlice;\n    const data = yield call(getProdcutById, productId);\n    yield put(setProductToDetailsPage(data))\n}\n\nexport function* watchFetchProducts() {\n    yield takeEvery(loadData.type, sagaFetchProducts);\n    yield takeEvery(loadData.type, sagaFetchProductById);\n}\n"]},"metadata":{},"sourceType":"module"}