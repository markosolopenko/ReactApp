{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nexport const fetchCreatedProducts = createAsyncThunk(\"api/getCreatedProducts\", async () => {\n  return await getCreatedProducts();\n});\nexport const fetchCreatedProductsById = createAsyncThunk(\"api/getCreatedProductsById\", async id => {\n  return await getCreatedProductsById(id);\n});\nexport const formSlice = createSlice({\n  name: 'formSlice',\n  initialState: {\n    products: [],\n    productById: {},\n    error: null,\n    status: '',\n    initState: {\n      name: '',\n      price: '',\n      origin: ''\n    }\n  },\n  reducers: {\n    setInitialValues(state, action) {\n      state.initState = action.payload;\n    }\n\n  },\n  extraReducers: {\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n      state.error = null;\n    },\n    [fetchCreatedProductsById.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.productById = action.payload;\n      state.error = null;\n    }\n  }\n});\nexport const {\n  setInitialValues\n} = formSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/formSlice.js"],"names":["createSlice","createAsyncThunk","getCreatedProducts","getCreatedProductsById","fetchCreatedProducts","fetchCreatedProductsById","id","formSlice","name","initialState","products","productById","error","status","initState","price","origin","reducers","setInitialValues","state","action","payload","extraReducers","fulfilled","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,2BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAGH,gBAAgB,CAChD,wBADgD,EAEhD,YAAY;AACR,SAAO,MAAMC,kBAAkB,EAA/B;AACH,CAJ+C,CAA7C;AAMP,OAAO,MAAMG,wBAAwB,GAAGJ,gBAAgB,CACpD,4BADoD,EAEpD,MAAOK,EAAP,IAAc;AACV,SAAO,MAAMH,sBAAsB,CAACG,EAAD,CAAnC;AACH,CAJmD,CAAjD;AAOP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,WAAW,EAAE,EAFH;AAGVC,IAAAA,KAAK,EAAE,IAHG;AAIVC,IAAAA,MAAM,EAAE,EAJE;AAKVC,IAAAA,SAAS,EAAE;AAACN,MAAAA,IAAI,EAAE,EAAP;AAAWO,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE;AAA9B;AALD,GAFmB;AASjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACC,OAAzB;AACH;;AAHK,GATuB;AAcjCC,EAAAA,aAAa,EAAE;AACX,KAAClB,oBAAoB,CAACmB,SAAtB,GAAkC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACN,MAAN,GAAe,WAAf;AACAM,MAAAA,KAAK,CAACT,QAAN,GAAiBU,MAAM,CAACC,OAAxB;AACAF,MAAAA,KAAK,CAACP,KAAN,GAAc,IAAd;AACH,KALU;AAMX,KAACP,wBAAwB,CAACkB,SAA1B,GAAsC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACN,MAAN,GAAe,WAAf;AACAM,MAAAA,KAAK,CAACR,WAAN,GAAoBS,MAAM,CAACC,OAA3B;AACAF,MAAAA,KAAK,CAACP,KAAN,GAAc,IAAd;AACH;AAVU;AAdkB,CAAD,CAA7B;AA6BP,OAAO,MAAM;AAACM,EAAAA;AAAD,IAAqBX,SAAS,CAACiB,OAArC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\n\nexport const fetchCreatedProducts = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async () => {\n        return await getCreatedProducts()\n    }\n)\nexport const fetchCreatedProductsById = createAsyncThunk(\n    \"api/getCreatedProductsById\",\n    async (id) => {\n        return await getCreatedProductsById(id)\n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'formSlice',\n    initialState: {\n        products: [],\n        productById: {},\n        error: null,\n        status: '',\n        initState: {name: '', price: '', origin: ''}\n    },\n    reducers: {\n        setInitialValues(state, action) {\n            state.initState = action.payload\n        }\n    },\n    extraReducers: {\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.products = action.payload\n            state.error = null\n        },\n        [fetchCreatedProductsById.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.productById = action.payload\n            state.error = null\n        }\n    }\n})\n\n\nexport const {setInitialValues} = formSlice.actions\n\n"]},"metadata":{},"sourceType":"module"}