{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\nexport const fetchProducts = createAsyncThunk(\"api/getProducts\", async ({\n  page,\n  perPage,\n  origins,\n  minPrice,\n  maxPrice\n}) => {\n  return await getProducts({\n    page,\n    perPage,\n    origins,\n    minPrice,\n    maxPrice\n  });\n});\nconst initialState = {\n  amountAddedProducts: 0,\n  sumOfPricesAddedProducts: 0,\n  product: {},\n  cartPageProducts: [],\n  cartPageSetProducts: [],\n  status: '',\n  error: null,\n  totalItems: 0,\n  page: 1,\n  initialItems: [],\n  products: [],\n  productsToShow: [],\n  origins: [],\n  perPage: '',\n  range: 1,\n  currPage: []\n};\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState,\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload.product;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      const {\n        count,\n        price\n      } = action.payload;\n\n      if (action.payload.count) {\n        state.amountAddedProducts += count;\n        state.sumOfPricesAddedProducts += price;\n      }\n    },\n\n    productsPerPage(state, action) {\n      state.perPage = action.payload.number;\n    },\n\n    setOrigin(state, action) {\n      const {\n        origin\n      } = action.payload;\n\n      if (state.origins.includes(origin)) {\n        state.origins = state.origins.filter(el => el !== origin);\n      } else {\n        state.origins.push(origin);\n      }\n    },\n\n    setPage(state, action) {\n      state.page = action.payload.page;\n    },\n\n    setRange(state) {\n      state.range = Math.ceil(state.totalItems / state.perPage);\n      state.page = 1;\n    },\n\n    handleArrowBack(state) {\n      state.page -= 1;\n    },\n\n    handleArrowForward(state) {\n      state.page += 1;\n    },\n\n    setPriceOfSpecificProducts(state, action) {\n      state.cartPageSetProducts = action.payload.totalSum;\n    },\n\n    handleOrderEvent(state) {\n      state.amountAddedProducts = 0;\n      state.sumOfPricesAddedProducts = 0;\n      state.cartPageProducts = [];\n      state.cartPageSetProducts = [];\n    }\n\n  },\n  extraReducers: {\n    [fetchProducts.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      const {\n        totalItems,\n        items\n      } = action.payload;\n      state.totalItems = totalItems;\n      state.products = items;\n      state.status = 'succeeded';\n      state.error = undefined;\n      state.initialItems = items;\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  setProductToDetailsPage,\n  addProductsToCartPage,\n  addProductsToCartPageSet,\n  decreaseProductFromDetails,\n  deleteProductFromCart,\n  subtractProductFromCart,\n  subtractFromAddedProducts,\n  takesDataFromInput,\n  showProductsByPrices,\n  setPage,\n  productsPerPage,\n  setRange,\n  handleArrowBack,\n  handleArrowForward,\n  movingSlider,\n  setPriceOfSpecificProducts,\n  handleOrderEvent,\n  setOrigin\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createAsyncThunk","createSlice","getProducts","fetchProducts","page","perPage","origins","minPrice","maxPrice","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","status","error","totalItems","initialItems","products","productsToShow","range","currPage","productsSlice","name","reducers","countGenerallyAddedProducts","state","action","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","productsPerPage","number","setOrigin","origin","includes","el","push","setPage","setRange","Math","ceil","handleArrowBack","handleArrowForward","setPriceOfSpecificProducts","totalSum","handleOrderEvent","extraReducers","pending","fulfilled","items","undefined","rejected","showProductsByPrices","movingSlider","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\n\n\nexport const fetchProducts = createAsyncThunk(\n    \"api/getProducts\",\n    async ({page, perPage, origins, minPrice, maxPrice}) => {\n        return await getProducts({page, perPage, origins, minPrice, maxPrice})\n    } \n)\n\nconst initialState = {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {}, \n    cartPageProducts: [],\n    cartPageSetProducts: [],\n    status: '',\n    error: null,\n    totalItems: 0,\n    page: 1,\n    initialItems: [],\n    products: [],\n    productsToShow: [],\n    origins: [],\n    perPage: '',\n    range: 1,\n    currPage: [],\n}\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload.product\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id)\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            const { count, price } = action.payload\n            if(action.payload.count) {\n                state.amountAddedProducts += count\n                state.sumOfPricesAddedProducts += price\n            }    \n        },\n        productsPerPage(state, action) {\n            state.perPage = action.payload.number\n        },\n        setOrigin(state, action) {\n            const {origin} = action.payload\n            if(state.origins.includes(origin)) {\n                state.origins = state.origins.filter(el => el !== origin)\n            }else {\n                state.origins.push(origin)\n            }\n            \n        },\n        setPage(state, action) {\n            state.page = action.payload.page\n        },\n        setRange(state) {\n            state.range = Math.ceil(state.totalItems / state.perPage)\n            state.page = 1\n        },\n        handleArrowBack(state) {\n            state.page -= 1\n        },\n        handleArrowForward(state) {\n            state.page += 1\n        },\n        setPriceOfSpecificProducts(state, action) {\n            state.cartPageSetProducts = action.payload.totalSum \n        },\n        handleOrderEvent(state) {\n            state.amountAddedProducts = 0\n            state.sumOfPricesAddedProducts = 0\n            state.cartPageProducts = []\n            state.cartPageSetProducts = []\n        }\n    },\n    extraReducers: {\n        [fetchProducts.pending]: (state) => {\n            state.status = 'loading'\n        },\n        [fetchProducts.fulfilled]: (state, action) => {\n            const { totalItems, items } = action.payload    \n            state.totalItems = totalItems\n            state.products = items\n            state.status = 'succeeded'\n            state.error = undefined\n            state.initialItems = items\n        },\n        [fetchProducts.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.payload\n        },\n    }\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    setProductToDetailsPage,\n    addProductsToCartPage,\n    addProductsToCartPageSet,\n    decreaseProductFromDetails,\n    deleteProductFromCart ,\n    subtractProductFromCart,\n    subtractFromAddedProducts,\n    takesDataFromInput,\n    showProductsByPrices,\n    setPage,\n    productsPerPage,\n    setRange,\n    handleArrowBack,\n    handleArrowForward,\n    movingSlider,\n    setPriceOfSpecificProducts,\n    handleOrderEvent,\n    setOrigin\n\n} = productsSlice.actions"]},"metadata":{},"sourceType":"module"}