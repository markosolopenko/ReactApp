{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nimport { getOrderProductsByNickname } from '../api/getOrderProducts';\nexport const fetchCreatedProducts = createAsyncThunk(\"api/getCreatedProducts\", async () => {\n  return await getCreatedProducts();\n});\nexport const fetchCreatedProductsById = createAsyncThunk(\"api/getCreatedProductsById\", async id => {\n  return await getCreatedProductsById(id);\n});\nexport const fetchOrderProductsByNickname = createAsyncThunk(\"api/getOrderProductsByNickname\", async nickname => {\n  return await getOrderProductsByNickname(nickname);\n});\nexport const formSlice = createSlice({\n  name: 'formSlice',\n  initialState: {\n    products: [],\n    productById: {\n      name: '',\n      price: '',\n      origin: ''\n    },\n    error: null,\n    status: '',\n    editing: false,\n    id: '',\n    productByNickname: [],\n    dateOfOrder: '',\n    nickname: 'Timo'\n  },\n  reducers: {\n    setProductForEdit(state, action) {\n      state.productById = action.payload.product;\n    },\n\n    resetEditForm(state, action) {\n      state.productById = action.payload.product;\n    },\n\n    setId(state, action) {\n      state.id = action.payload.id;\n    },\n\n    setDateOfOrder(state, action) {\n      state.dateOfOrder = new Date().toDateString();\n    },\n\n    setNickname(state, action) {\n      state.nickname = action.payload.nickname;\n    }\n\n  },\n  extraReducers: {\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n      state.error = undefined;\n    },\n    [fetchCreatedProductsById.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.productById = action.payload;\n      state.error = null;\n    },\n    [fetchOrderProductsByNickname.fulfilled]: (state, action) => {\n      if (action.payload) {\n        state.status = 'succeeded';\n        state.productByNickname = action.payload.orderedProducts;\n        state.error = undefined;\n        state.dateOfOrder = action.payload.date;\n      }\n    }\n  }\n});\nexport const {\n  setProductForEdit,\n  setId,\n  resetEditForm,\n  setDateOfOrder,\n  setNickname\n} = formSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/formSlice.js"],"names":["createSlice","createAsyncThunk","getCreatedProducts","getCreatedProductsById","getOrderProductsByNickname","fetchCreatedProducts","fetchCreatedProductsById","id","fetchOrderProductsByNickname","nickname","formSlice","name","initialState","products","productById","price","origin","error","status","editing","productByNickname","dateOfOrder","reducers","setProductForEdit","state","action","payload","product","resetEditForm","setId","setDateOfOrder","Date","toDateString","setNickname","extraReducers","fulfilled","undefined","orderedProducts","date","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nimport { getOrderProductsByNickname } from '../api/getOrderProducts';\n\nexport const fetchCreatedProducts = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async () => {\n        return await getCreatedProducts()\n    }\n)\nexport const fetchCreatedProductsById = createAsyncThunk(\n    \"api/getCreatedProductsById\",\n    async (id) => {\n        return await getCreatedProductsById(id)\n    }\n)\n\nexport const fetchOrderProductsByNickname = createAsyncThunk(\n    \"api/getOrderProductsByNickname\",\n    async (nickname) => {\n        return await getOrderProductsByNickname(nickname)\n        \n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'formSlice',\n    initialState: {\n        products: [],\n        productById: {name: '', price: '', origin: ''},\n        error: null,\n        status: '',\n        editing: false,\n        id: '',\n        productByNickname: [],\n        dateOfOrder: '',\n        nickname: 'Timo'\n    },\n    reducers: {\n        setProductForEdit(state, action) {\n            state.productById = action.payload.product\n        },\n        resetEditForm(state, action) {\n            state.productById = action.payload.product\n        },\n        setId(state, action) {\n            state.id = action.payload.id\n        },\n        setDateOfOrder(state, action) {\n            state.dateOfOrder = new Date().toDateString()\n        },\n        setNickname(state, action) {\n            state.nickname = action.payload.nickname\n        }\n    },\n    extraReducers: {\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.products = action.payload\n            state.error = undefined\n        },\n        [fetchCreatedProductsById.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.productById = action.payload\n            state.error = null\n        },\n        [fetchOrderProductsByNickname.fulfilled]: (state, action) => {\n            if(action.payload) {\n                state.status = 'succeeded'\n                state.productByNickname = action.payload.orderedProducts\n                state.error = undefined\n                state.dateOfOrder = action.payload.date \n            }\n              \n        },\n    }\n})\n\n\nexport const { \n    setProductForEdit,\n    setId,\n    resetEditForm,\n    setDateOfOrder,\n    setNickname\n} = formSlice.actions\n\n"]},"metadata":{},"sourceType":"module"}