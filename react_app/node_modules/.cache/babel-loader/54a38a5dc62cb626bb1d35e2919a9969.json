{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  amountAddedProducts: 0,\n  sumOfPricesAddedProducts: 0,\n  product: {},\n  cartPageProducts: [],\n  cartPageSetProducts: [],\n  status: '',\n  error: null,\n  totalItems: 0,\n  page: 1,\n  initialItems: [],\n  products: [],\n  origins: [],\n  perPage: '',\n  range: 1,\n  minPrice: '',\n  maxPrice: '',\n  productId: ''\n};\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState,\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      const {\n        count,\n        price\n      } = action.payload;\n\n      if (action.payload.count) {\n        state.amountAddedProducts += count;\n        state.sumOfPricesAddedProducts += price;\n      }\n    },\n\n    productsPerPage(state, action) {\n      state.perPage = action.payload.number;\n    },\n\n    setOrigin(state, action) {\n      const {\n        origin\n      } = action.payload;\n\n      if (state.origins.includes(origin)) {\n        state.origins = state.origins.filter(el => el !== origin);\n      } else {\n        state.origins.push(origin);\n      }\n    },\n\n    setMinPrice(state, action) {\n      state.minPrice = action.payload.min;\n    },\n\n    setMaxPrice(state, action) {\n      state.maxPrice = action.payload.max;\n    },\n\n    setPage(state, action) {\n      state.page = action.payload.page;\n    },\n\n    setRange(state) {\n      state.range = Math.ceil(state.totalItems / state.perPage);\n      state.page = 1;\n    },\n\n    handleArrowBack(state) {\n      state.page -= 1;\n    },\n\n    handleArrowForward(state) {\n      state.page += 1;\n    },\n\n    setPriceOfSpecificProducts(state, action) {\n      state.cartPageSetProducts = action.payload.totalSum;\n    },\n\n    handleOrderEvent(state) {\n      state.amountAddedProducts = 0;\n      state.sumOfPricesAddedProducts = 0;\n      state.cartPageProducts = [];\n      state.cartPageSetProducts = [];\n    },\n\n    fetchProducts(state, action) {\n      state.products = action.payload;\n    },\n\n    loadData(state) {\n      state.status = 'loading';\n    },\n\n    setProductId(state, action) {\n      state.productId = action.payload.id;\n    },\n\n    loadDataById(state) {\n      state.status = 'loading';\n    }\n\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  decreaseProductFromDetails,\n  setPriceOfSpecificProducts,\n  subtractFromAddedProducts,\n  addProductsToCartPageSet,\n  subtractProductFromCart,\n  setProductToDetailsPage,\n  deleteProductFromCart,\n  addProductsToCartPage,\n  handleArrowForward,\n  takesDataFromInput,\n  handleOrderEvent,\n  handleArrowBack,\n  productsPerPage,\n  fetchProducts,\n  setMaxPrice,\n  setMinPrice,\n  setOrigin,\n  setRange,\n  setPage,\n  loadData,\n  setProductId,\n  loadDataById\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createSlice","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","status","error","totalItems","page","initialItems","products","origins","perPage","range","minPrice","maxPrice","productId","productsSlice","name","reducers","countGenerallyAddedProducts","state","action","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","productsPerPage","number","setOrigin","origin","includes","el","push","setMinPrice","min","setMaxPrice","max","setPage","setRange","Math","ceil","handleArrowBack","handleArrowForward","setPriceOfSpecificProducts","totalSum","handleOrderEvent","fetchProducts","loadData","setProductId","loadDataById","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\n\nconst initialState = {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {}, \n    cartPageProducts: [],\n    cartPageSetProducts: [],\n    status: '',\n    error: null,\n    totalItems: 0,\n    page: 1,\n    initialItems: [],\n    products: [],\n    origins: [],\n    perPage: '',\n    range: 1,\n    minPrice: '',\n    maxPrice: '',\n    productId: ''\n}\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => \n                product.id !== id\n            )\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            const { count, price } = action.payload\n            if(action.payload.count) {\n                state.amountAddedProducts += count\n                state.sumOfPricesAddedProducts += price\n            }    \n        },\n        productsPerPage(state, action) {\n            state.perPage = action.payload.number\n        },\n        setOrigin(state, action) {\n            const {origin} = action.payload\n            if(state.origins.includes(origin)) {\n                state.origins = state.origins.filter(el => el !== origin)\n            }else {\n                state.origins.push(origin)\n            }\n            \n        },\n        setMinPrice(state, action) {\n            state.minPrice = action.payload.min\n        },\n        setMaxPrice(state, action) {\n            state.maxPrice = action.payload.max\n        },\n        setPage(state, action) {\n            state.page = action.payload.page\n        },\n        setRange(state) {\n            state.range = Math.ceil(state.totalItems / state.perPage)\n            state.page = 1\n        },\n        handleArrowBack(state) {\n            state.page -= 1\n        },\n        handleArrowForward(state) {\n            state.page += 1\n        },\n        setPriceOfSpecificProducts(state, action) {\n            state.cartPageSetProducts = action.payload.totalSum \n        },\n        handleOrderEvent(state) {\n            state.amountAddedProducts = 0\n            state.sumOfPricesAddedProducts = 0\n            state.cartPageProducts = []\n            state.cartPageSetProducts = []\n        },\n        fetchProducts(state, action) {\n            state.products = action.payload\n        },\n        loadData(state) {\n            state.status = 'loading'\n        },\n        setProductId(state, action) {\n            state.productId = action.payload.id\n        },\n        loadDataById(state) {\n            state.status= 'loading'\n        }\n    },\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    decreaseProductFromDetails,\n    setPriceOfSpecificProducts,\n    subtractFromAddedProducts,\n    addProductsToCartPageSet,\n    subtractProductFromCart, \n    setProductToDetailsPage,\n    deleteProductFromCart,\n    addProductsToCartPage,\n    handleArrowForward,\n    takesDataFromInput,\n    handleOrderEvent,\n    handleArrowBack,\n    productsPerPage,\n    fetchProducts,\n    setMaxPrice, \n    setMinPrice,\n    setOrigin,\n    setRange,\n    setPage,\n    loadData,\n    setProductId,\n    loadDataById\n\n} = productsSlice.actions"]},"metadata":{},"sourceType":"module"}