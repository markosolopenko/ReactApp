{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const mainPageSlice = createSlice({\n  name: 'products',\n  initialState: {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {},\n    cartPageProducts: [],\n    cartPageSetProducts: []\n  },\n  reducers: {\n    generallyAddedProducts(state, action) {\n      const {\n        value,\n        price\n      } = action.payload;\n      state.amountAddedProducts += value;\n      state.sumOfPricesAddedProducts += price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      const {\n        product\n      } = action.payload;\n      state.product = product;\n    },\n\n    addProductsToCartPage(state, action) {\n      const {\n        array\n      } = action.payload.payload;\n      return { ...state,\n        cartPageProducts: [...state.cartPageProducts, ...array]\n      };\n    },\n\n    addProductsCartPageSet(state, action) {\n      const {\n        product\n      } = action.payload.payload;\n      return { ...state,\n        cartPageSetProducts: [...state.cartPageSetProducts, product]\n      };\n    },\n\n    decreaseProductFromCart(state, action) {\n      return { ...state,\n        cartPageProducts: state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n      };\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id,\n        count,\n        value\n      } = action.payload.payload;\n      return { ...state,\n        cartPageSetProducts: state.cartPageSetProducts.filter(product => product.id != id),\n        amountAddedProducts: state.amountAddedProducts - count,\n        sumOfPricesAddedProducts: state.sumOfPricesAddedProducts - value\n      };\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/mainPageSlice.js"],"names":["createSlice","mainPageSlice","name","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","reducers","generallyAddedProducts","state","action","value","price","payload","setProductToDetailsPage","addProductsToCartPage","array","addProductsCartPageSet","decreaseProductFromCart","slice","length","deleteProductFromCart","id","count","filter"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,OAAO,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACrCE,EAAAA,IAAI,EAAE,UAD+B;AAErCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,mBAAmB,EAAE,CADX;AAEVC,IAAAA,wBAAwB,EAAE,CAFhB;AAGVC,IAAAA,OAAO,EAAE,EAHC;AAIVC,IAAAA,gBAAgB,EAAE,EAJR;AAKVC,IAAAA,mBAAmB,EAAE;AALX,GAFuB;AASrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,sBAAsB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAClC,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAmBF,MAAM,CAACG,OAAhC;AACAJ,MAAAA,KAAK,CAACP,mBAAN,IAA6BS,KAA7B;AACAF,MAAAA,KAAK,CAACN,wBAAN,IAAkCS,KAAlC;AACH,KALK;;AAMNE,IAAAA,uBAAuB,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACnC,YAAM;AAAEN,QAAAA;AAAF,UAAcM,MAAM,CAACG,OAA3B;AACAJ,MAAAA,KAAK,CAACL,OAAN,GAAgBA,OAAhB;AACH,KATK;;AAUNW,IAAAA,qBAAqB,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAM;AAAEM,QAAAA;AAAF,UAAYN,MAAM,CAACG,OAAP,CAAeA,OAAjC;AAEA,aAAO,EACH,GAAGJ,KADA;AAEHJ,QAAAA,gBAAgB,EAAE,CAAC,GAAGI,KAAK,CAACJ,gBAAV,EAA4B,GAAGW,KAA/B;AAFf,OAAP;AAIH,KAjBK;;AAkBNC,IAAAA,sBAAsB,CAACR,KAAD,EAAQC,MAAR,EAAgB;AAClC,YAAM;AAAEN,QAAAA;AAAF,UAAcM,MAAM,CAACG,OAAP,CAAeA,OAAnC;AACA,aAAO,EACH,GAAGJ,KADA;AAEHH,QAAAA,mBAAmB,EAAE,CAAC,GAAGG,KAAK,CAACH,mBAAV,EAA+BF,OAA/B;AAFlB,OAAP;AAIH,KAxBK;;AAyBNc,IAAAA,uBAAuB,CAACT,KAAD,EAAQC,MAAR,EAAgB;AACnC,aAAO,EACH,GAAGD,KADA;AAEHJ,QAAAA,gBAAgB,EAAEI,KAAK,CAACJ,gBAAN,CAAuBc,KAAvB,CAA6B,CAA7B,EAAgCV,KAAK,CAACJ,gBAAN,CAAuBe,MAAvB,GAAgC,CAAhE;AAFf,OAAP;AAIH,KA9BK;;AA+BNC,IAAAA,qBAAqB,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAM;AAAEY,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaZ,QAAAA;AAAb,UAAuBD,MAAM,CAACG,OAAP,CAAeA,OAA5C;AACA,aAAO,EACH,GAAGJ,KADA;AAEHH,QAAAA,mBAAmB,EAAEG,KAAK,CAACH,mBAAN,CAA0BkB,MAA1B,CAAiCpB,OAAO,IAAIA,OAAO,CAACkB,EAAR,IAAcA,EAA1D,CAFlB;AAGHpB,QAAAA,mBAAmB,EAAEO,KAAK,CAACP,mBAAN,GAA4BqB,KAH9C;AAIHpB,QAAAA,wBAAwB,EAAEM,KAAK,CAACN,wBAAN,GAAiCQ;AAJxD,OAAP;AAMH;;AAvCK;AAT2B,CAAD,CAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const mainPageSlice = createSlice({\n    name: 'products',\n    initialState: {\n        amountAddedProducts: 0,\n        sumOfPricesAddedProducts: 0,\n        product: {}, \n        cartPageProducts: [],\n        cartPageSetProducts: [],\n    }, \n    reducers: {\n        generallyAddedProducts(state, action) {\n            const { value, price } = action.payload\n            state.amountAddedProducts += value\n            state.sumOfPricesAddedProducts += price\n        },\n        setProductToDetailsPage(state, action) {\n            const { product } = action.payload\n            state.product = product\n        },\n        addProductsToCartPage(state, action) {\n            const { array } = action.payload.payload\n            \n            return {\n                ...state,\n                cartPageProducts: [...state.cartPageProducts, ...array]\n            }\n        },\n        addProductsCartPageSet(state, action) {\n            const { product } = action.payload.payload\n            return {\n                ...state,\n                cartPageSetProducts: [...state.cartPageSetProducts, product]\n            }\n        },\n        decreaseProductFromCart(state, action) {\n            return {\n                ...state,\n                cartPageProducts: state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n            }\n        },\n        deleteProductFromCart(state, action) {\n            const { id, count, value } = action.payload.payload\n            return {\n                ...state,\n                cartPageSetProducts: state.cartPageSetProducts.filter(product => product.id != id),\n                amountAddedProducts: state.amountAddedProducts - count,\n                sumOfPricesAddedProducts: state.sumOfPricesAddedProducts - value,\n            }\n        }\n    }\n}) "]},"metadata":{},"sourceType":"module"}