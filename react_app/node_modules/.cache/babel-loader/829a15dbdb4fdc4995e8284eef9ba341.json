{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nexport const fetchCreatedProducts = createAsyncThunk(\"api/getCreatedProducts\", async () => {\n  return await getCreatedProducts();\n});\nexport const fetchCreatedProductsById = createAsyncThunk(\"api/getCreatedProducts\", async id => {\n  return await getCreatedProductsById();\n});\nexport const formSlice = createSlice({\n  name: 'formSlice',\n  initialState: {\n    products: [],\n    productById: {},\n    error: null,\n    status: ''\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n      state.error = null;\n    },\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.productById = action.payload;\n      state.error = null;\n    }\n  }\n});","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/formSlice.js"],"names":["createSlice","createAsyncThunk","getCreatedProducts","getCreatedProductsById","fetchCreatedProducts","fetchCreatedProductsById","id","formSlice","name","initialState","products","productById","error","status","reducers","extraReducers","fulfilled","state","action","payload"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,2BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAGH,gBAAgB,CAChD,wBADgD,EAEhD,YAAY;AACR,SAAO,MAAMC,kBAAkB,EAA/B;AACH,CAJ+C,CAA7C;AAMP,OAAO,MAAMG,wBAAwB,GAAGJ,gBAAgB,CACpD,wBADoD,EAEpD,MAAOK,EAAP,IAAc;AACV,SAAO,MAAMH,sBAAsB,EAAnC;AACH,CAJmD,CAAjD;AAOP,OAAO,MAAMI,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,WAAW,EAAE,EAFH;AAGVC,IAAAA,KAAK,EAAE,IAHG;AAIVC,IAAAA,MAAM,EAAE;AAJE,GAFmB;AAQjCC,EAAAA,QAAQ,EAAE,EARuB;AAWjCC,EAAAA,aAAa,EAAE;AACX,KAACX,oBAAoB,CAACY,SAAtB,GAAkC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACAI,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACAF,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,KALU;AAMX,KAACR,oBAAoB,CAACY,SAAtB,GAAkC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACAI,MAAAA,KAAK,CAACN,WAAN,GAAoBO,MAAM,CAACC,OAA3B;AACAF,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH;AAVU;AAXkB,CAAD,CAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\n\nexport const fetchCreatedProducts = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async () => {\n        return await getCreatedProducts()\n    }\n)\nexport const fetchCreatedProductsById = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async (id) => {\n        return await getCreatedProductsById()\n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'formSlice',\n    initialState: {\n        products: [],\n        productById: {},\n        error: null,\n        status: '',\n    },\n    reducers: {\n        \n    },\n    extraReducers: {\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.products = action.payload\n            state.error = null\n        },\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.productById = action.payload\n            state.error = null\n        }\n    }\n})\n\n"]},"metadata":{},"sourceType":"module"}