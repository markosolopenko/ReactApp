{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\nexport const fetchProducts = createAsyncThunk(\"api/getProducts\", async (page, perPage) => {\n  return await getProducts(page, perPage);\n});\nconst initialState = {\n  amountAddedProducts: 0,\n  sumOfPricesAddedProducts: 0,\n  product: {},\n  cartPageProducts: [],\n  cartPageSetProducts: [],\n  status: '',\n  error: null,\n  totalItems: 0,\n  page: 1,\n  initialItems: [],\n  products: [],\n  productsToShow: [],\n  origins: [],\n  perPage: 0\n};\nexport const productsSlice = createSlice({\n  name: 'productsSlice',\n  initialState,\n  reducers: {\n    countGenerallyAddedProducts(state, action) {\n      state.amountAddedProducts += action.payload.count;\n      state.sumOfPricesAddedProducts += action.payload.price;\n    },\n\n    setProductToDetailsPage(state, action) {\n      state.product = action.payload.product;\n    },\n\n    addProductsToCartPage(state, action) {\n      state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array];\n    },\n\n    addProductsToCartPageSet(state, action) {\n      state.cartPageSetProducts = [...state.cartPageSetProducts, action.payload.product];\n    },\n\n    decreaseProductFromDetails(state) {\n      state.cartPageProducts.slice(0, state.cartPageProducts.length - 1);\n    },\n\n    deleteProductFromCart(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id);\n      state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id);\n    },\n\n    subtractProductFromCart(state, action) {\n      state.cartPageProducts.splice(action.payload.index, 1);\n    },\n\n    subtractFromAddedProducts(state, action) {\n      state.amountAddedProducts -= action.payload.count;\n      state.sumOfPricesAddedProducts -= action.payload.price;\n    },\n\n    takesDataFromInput(state, action) {\n      const {\n        count,\n        price\n      } = action.payload;\n\n      if (action.payload.count) {\n        state.amountAddedProducts += count;\n        state.sumOfPricesAddedProducts += price;\n      }\n    },\n\n    productsPerPage(state, action) {\n      state.perPage = action.payload.number;\n    },\n\n    showSelectedNumberProductsPerPage(state) {\n      if (parseInt(state.perPage)) {\n        let indexOfLast = state.page * state.perPage;\n        let indexOfFirst = indexOfLast - state.PerPage;\n        state.products = state.initialItems.slice(indexOfFirst, indexOfFirst);\n        state.productsToShow = state.products;\n      } else {\n        state.products = state.initialItems;\n        state.productsToShow = state.products;\n      }\n    },\n\n    showProductsByPrices(state, action) {\n      const {\n        min,\n        max\n      } = action.payload;\n      state.products = state.initialItems.filter(product => Number(product.price) >= Number(min) && Number(product.price) <= Number(max));\n\n      if (min === 0 && max === 0) {\n        state.products = state.productsToShow;\n      }\n    },\n\n    showSelectedOrigins(state, action) {\n      const {\n        checked,\n        origin\n      } = action.payload;\n\n      if (checked === true) {\n        state.products = state.initialItems.filter(product => product.origin === origin);\n        state.productsToShow = [...state.productsToShow, ...state.products];\n        state.products = state.productsToShow;\n      }\n\n      if (checked === false) {\n        state.products = state.products.filter(product => product.origin !== origin);\n        state.productsToShow = state.products;\n      }\n\n      if (state.products.length === 0) {\n        state.products = state.initialItems;\n      }\n    },\n\n    setPage(state, action) {\n      state.page = action.payload.page;\n    }\n\n  },\n  extraReducers: {\n    [fetchProducts.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      const {\n        totalItems,\n        items\n      } = action.payload;\n      state.totalItems = totalItems;\n      state.products = [...state.products, ...items];\n      state.status = 'succeeded';\n      state.error = undefined;\n      state.initialItems = [...state.initialItems, ...items];\n      items.forEach(product => !state.origins.includes(product.origin) ? state.origins.push(product.origin) : null);\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  countGenerallyAddedProducts,\n  setProductToDetailsPage,\n  addProductsToCartPage,\n  addProductsToCartPageSet,\n  decreaseProductFromDetails,\n  deleteProductFromCart,\n  subtractProductFromCart,\n  subtractFromAddedProducts,\n  takesDataFromInput,\n  handleCheckbox,\n  showSelectedOrigins,\n  showProductsByPrices,\n  showSelectedNumberProductsPerPage,\n  setPage,\n  productsPerPage\n} = productsSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/productsSlice.js"],"names":["createAsyncThunk","createSlice","getProducts","fetchProducts","page","perPage","initialState","amountAddedProducts","sumOfPricesAddedProducts","product","cartPageProducts","cartPageSetProducts","status","error","totalItems","initialItems","products","productsToShow","origins","productsSlice","name","reducers","countGenerallyAddedProducts","state","action","payload","count","price","setProductToDetailsPage","addProductsToCartPage","array","addProductsToCartPageSet","decreaseProductFromDetails","slice","length","deleteProductFromCart","id","filter","subtractProductFromCart","splice","index","subtractFromAddedProducts","takesDataFromInput","productsPerPage","number","showSelectedNumberProductsPerPage","parseInt","indexOfLast","indexOfFirst","PerPage","showProductsByPrices","min","max","Number","showSelectedOrigins","checked","origin","setPage","extraReducers","pending","fulfilled","items","undefined","forEach","includes","push","rejected","handleCheckbox","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getProducts } from '../api/getProducts';\n\n\nexport const fetchProducts = createAsyncThunk(\n    \"api/getProducts\",\n    async (page, perPage) => {\n        return await getProducts(page, perPage)\n    } \n)\n\n\nconst initialState = {\n    amountAddedProducts: 0,\n    sumOfPricesAddedProducts: 0,\n    product: {}, \n    cartPageProducts: [],\n    cartPageSetProducts: [],\n    status: '',\n    error: null,\n    totalItems: 0,\n    page: 1,\n    initialItems: [],\n    products: [],\n    productsToShow: [],\n    origins: [],\n    perPage: 0,\n}\n\nexport const productsSlice = createSlice({\n    name: 'productsSlice',\n    initialState, \n    reducers: {\n        countGenerallyAddedProducts(state, action) {\n            state.amountAddedProducts += action.payload.count\n            state.sumOfPricesAddedProducts += action.payload.price\n        },\n        setProductToDetailsPage(state, action) {\n            state.product = action.payload.product\n        },\n        addProductsToCartPage(state, action) {\n            state.cartPageProducts = [...state.cartPageProducts, ...action.payload.array]\n        },\n        addProductsToCartPageSet(state, action) {\n            state.cartPageSetProducts =  [...state.cartPageSetProducts, action.payload.product]\n        },\n        decreaseProductFromDetails(state) {\n            state.cartPageProducts.slice(0, state.cartPageProducts.length - 1)\n        },\n        deleteProductFromCart(state, action) {\n            const { id } = action.payload\n            state.cartPageSetProducts = state.cartPageSetProducts.filter(product => product.id !== id)\n            state.cartPageProducts = state.cartPageProducts.filter(product => product.id !== id)\n        },\n        subtractProductFromCart(state, action) {\n            state.cartPageProducts.splice(action.payload.index, 1)\n        },\n        subtractFromAddedProducts(state, action) {\n            state.amountAddedProducts -= action.payload.count\n            state.sumOfPricesAddedProducts -= action.payload.price\n        },\n        takesDataFromInput(state, action) {\n            const { count, price } = action.payload\n            if(action.payload.count) {\n                state.amountAddedProducts += count\n                state.sumOfPricesAddedProducts += price\n            }    \n        },\n        productsPerPage(state, action) {\n            state.perPage = action.payload.number\n        },\n        showSelectedNumberProductsPerPage(state) {\n            if(parseInt(state.perPage)) {\n                let indexOfLast = state.page * state.perPage\n                let indexOfFirst = indexOfLast - state.PerPage\n                state.products = state.initialItems.slice(indexOfFirst, indexOfFirst)\n                state.productsToShow = state.products\n            }else {\n                state.products = state.initialItems\n                state.productsToShow = state.products\n            }  \n        },\n        showProductsByPrices(state, action) {\n            const {min, max} = action.payload\n            state.products = state.initialItems.filter(product => \n                Number(product.price) >= Number(min) && Number(product.price) <= Number(max))\n            if(min === 0 && max === 0) {\n                state.products = state.productsToShow\n            }\n        },\n        showSelectedOrigins(state, action) {\n            const { checked, origin } = action.payload\n            if(checked === true) {\n                state.products = state.initialItems.filter(product => product.origin === origin)\n                state.productsToShow = [...state.productsToShow, ...state.products]\n                state.products = state.productsToShow\n            }\n            if(checked === false) {\n                state.products = state.products.filter(product => product.origin !== origin)\n                state.productsToShow = state.products\n            }\n            if (state.products.length === 0) {\n                state.products = state.initialItems\n            }\n        },\n        setPage(state, action) {\n            state.page = action.payload.page\n        }\n\n    },\n    extraReducers: {\n        [fetchProducts.pending]: (state) => {\n            state.status = 'loading'\n        },\n        [fetchProducts.fulfilled]: (state, action) => {\n            const { totalItems, items } = action.payload \n            state.totalItems = totalItems\n            state.products = [...state.products, ...items]\n            state.status = 'succeeded'\n            state.error = undefined\n            state.initialItems = [...state.initialItems, ...items]\n            items.forEach(product => \n                !state.origins.includes(product.origin) ? state.origins.push(product.origin): null)\n        },\n        [fetchProducts.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.payload\n        },\n    }\n}) \n\nexport const {\n    countGenerallyAddedProducts,\n    setProductToDetailsPage,\n    addProductsToCartPage,\n    addProductsToCartPageSet,\n    decreaseProductFromDetails,\n    deleteProductFromCart ,\n    subtractProductFromCart,\n    subtractFromAddedProducts,\n    takesDataFromInput,\n    handleCheckbox,\n    showSelectedOrigins,\n    showProductsByPrices,\n    showSelectedNumberProductsPerPage,\n    setPage,\n    productsPerPage\n\n} = productsSlice.actions"]},"metadata":{},"sourceType":"module"}