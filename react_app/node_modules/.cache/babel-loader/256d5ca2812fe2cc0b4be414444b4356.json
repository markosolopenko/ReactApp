{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\nexport const fetchCreatedProducts = createAsyncThunk(\"api/getCreatedProducts\", async () => {\n  return await getCreatedProducts();\n});\nexport const fetchCreatedProductsById = createAsyncThunk(\"api/getCreatedProductsById\", async id => {\n  return await getCreatedProductsById(id);\n});\nexport const formSlice = createSlice({\n  name: 'formSlice',\n  initialState: {\n    products: [{\n      name: 'Tomatos',\n      price: '123',\n      origin: 'EUROPE'\n    }, {\n      name: 'Potatos',\n      price: '245',\n      origin: 'USA'\n    }, {\n      name: 'Fishes',\n      price: '367',\n      origin: 'ASIA'\n    }],\n    productById: {\n      name: '',\n      price: '',\n      origin: ''\n    },\n    error: null,\n    status: '',\n    formInitState: [],\n    editing: false,\n    id: ''\n  },\n  reducers: {\n    setForAddProduct(state) {\n      state.productById = {\n        name: '',\n        price: '',\n        origin: ''\n      };\n    },\n\n    setProductForEdit(state, action) {\n      state.productById = action.payload.product;\n    },\n\n    setId(state, action) {\n      state.id = action.payload.id;\n    }\n\n  },\n  extraReducers: {\n    [fetchCreatedProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.products = action.payload;\n      state.error = null;\n    } // [fetchCreatedProductsById.fulfilled]: (state, action) => {\n    //     state.status = 'succeeded'\n    //     state.productById = action.payload\n    //     state.error = null\n    // }\n\n  }\n});\nexport const {\n  setForAddProduct,\n  setProductForEdit,\n  setId\n} = formSlice.actions;","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/features/formSlice.js"],"names":["createSlice","createAsyncThunk","getCreatedProducts","getCreatedProductsById","fetchCreatedProducts","fetchCreatedProductsById","id","formSlice","name","initialState","products","price","origin","productById","error","status","formInitState","editing","reducers","setForAddProduct","state","setProductForEdit","action","payload","product","setId","extraReducers","fulfilled","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,2BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAGH,gBAAgB,CAChD,wBADgD,EAEhD,YAAY;AACR,SAAO,MAAMC,kBAAkB,EAA/B;AACH,CAJ+C,CAA7C;AAMP,OAAO,MAAMG,wBAAwB,GAAGJ,gBAAgB,CACpD,4BADoD,EAEpD,MAAOK,EAAP,IAAc;AACV,SAAO,MAAMH,sBAAsB,CAACG,EAAD,CAAnC;AACH,CAJmD,CAAjD;AAOP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,SAAP;AAAkBG,MAAAA,KAAK,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KAAD,EACC;AAACJ,MAAAA,IAAI,EAAE,SAAP;AAAkBG,MAAAA,KAAK,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KADD,EAEC;AAACJ,MAAAA,IAAI,EAAE,QAAP;AAAiBG,MAAAA,KAAK,EAAE,KAAxB;AAA+BC,MAAAA,MAAM,EAAE;AAAvC,KAFD,CADA;AAKVC,IAAAA,WAAW,EAAE;AAACL,MAAAA,IAAI,EAAE,EAAP;AAAWG,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KALH;AAMVE,IAAAA,KAAK,EAAE,IANG;AAOVC,IAAAA,MAAM,EAAE,EAPE;AAQVC,IAAAA,aAAa,EAAE,EARL;AASVC,IAAAA,OAAO,EAAE,KATC;AAUVX,IAAAA,EAAE,EAAE;AAVM,GAFmB;AAcjCY,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACP,WAAN,GAAoB;AAACL,QAAAA,IAAI,EAAE,EAAP;AAAWG,QAAAA,KAAK,EAAE,EAAlB;AAAsBC,QAAAA,MAAM,EAAE;AAA9B,OAApB;AACH,KAHK;;AAINS,IAAAA,iBAAiB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC7BF,MAAAA,KAAK,CAACP,WAAN,GAAoBS,MAAM,CAACC,OAAP,CAAeC,OAAnC;AACH,KANK;;AAONC,IAAAA,KAAK,CAACL,KAAD,EAAQE,MAAR,EAAgB;AACjBF,MAAAA,KAAK,CAACd,EAAN,GAAWgB,MAAM,CAACC,OAAP,CAAejB,EAA1B;AACH;;AATK,GAduB;AAyBjCoB,EAAAA,aAAa,EAAE;AACX,KAACtB,oBAAoB,CAACuB,SAAtB,GAAkC,CAACP,KAAD,EAAQE,MAAR,KAAmB;AACjDF,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACV,QAAN,GAAiBY,MAAM,CAACC,OAAxB;AACAH,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACH,KALU,CAMX;AACA;AACA;AACA;AACA;;AAVW;AAzBkB,CAAD,CAA7B;AAwCP,OAAO,MAAM;AACTK,EAAAA,gBADS;AAETE,EAAAA,iBAFS;AAGTI,EAAAA;AAHS,IAITlB,SAAS,CAACqB,OAJP","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCreatedProducts, getCreatedProductsById } from '../api/getCreatedProducts';\n\nexport const fetchCreatedProducts = createAsyncThunk(\n    \"api/getCreatedProducts\",\n    async () => {\n        return await getCreatedProducts()\n    }\n)\nexport const fetchCreatedProductsById = createAsyncThunk(\n    \"api/getCreatedProductsById\",\n    async (id) => {\n        return await getCreatedProductsById(id)\n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'formSlice',\n    initialState: {\n        products: [{name: 'Tomatos', price: '123', origin: 'EUROPE'},\n                   {name: 'Potatos', price: '245', origin: 'USA'},\n                   {name: 'Fishes', price: '367', origin: 'ASIA'}\n                ],\n        productById: {name: '', price: '', origin: ''},\n        error: null,\n        status: '',\n        formInitState: [],\n        editing: false,\n        id: ''\n    },\n    reducers: {\n        setForAddProduct(state) {\n            state.productById = {name: '', price: '', origin: ''}\n        },\n        setProductForEdit(state, action) {\n            state.productById = action.payload.product\n        },\n        setId(state, action) {\n            state.id = action.payload.id\n        }\n    },\n    extraReducers: {\n        [fetchCreatedProducts.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.products = action.payload\n            state.error = null\n        },\n        // [fetchCreatedProductsById.fulfilled]: (state, action) => {\n        //     state.status = 'succeeded'\n        //     state.productById = action.payload\n        //     state.error = null\n        // }\n    }\n})\n\n\nexport const {\n    setForAddProduct, \n    setProductForEdit,\n    setId\n} = formSlice.actions\n\n"]},"metadata":{},"sourceType":"module"}