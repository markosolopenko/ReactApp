{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/marko/projects/ReactDevelop/react_app/src/components/CartPageComponents/CartBodyProduct/CartBodyElement.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // Redux \n\nimport { useDispatch } from 'react-redux';\nimport { subtractProductFromCart, countGenerallyAddedProducts, subtractFromAddedProducts, addProductsToCartPage } from '../../../features/productsSlice'; // icons imports \n\nimport { ReactComponent as Plus } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/plus.svg\";\nimport { ReactComponent as Minus } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/minus.svg\";\nimport { ReactComponent as Trash } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/trash.svg\";\n\nconst CartBodyElement = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    product,\n    deleteProduct,\n    cartPageProducts\n  } = props; // Count how many current product have been added  \n\n  let count = 0;\n  cartPageProducts.forEach(productObj => {\n    if (productObj === product) {\n      count += 1;\n    }\n  }); // counter State and state for input \n\n  let [counter, setCounter] = useState(count);\n  let [value, setValue] = useState('');\n  let sum = product.price * Number(value); // methods for adding and subtract the elements and also count them\n\n  const increase = () => {\n    if (counter >= 0) {\n      setCounter(counter + 1);\n      dispatch(countGenerallyAddedProducts({\n        count: 1,\n        price: product.price\n      }));\n      dispatch(addProductsToCartPage({\n        product: [product]\n      }));\n    }\n  };\n\n  const decrease = () => {\n    if (counter >= 1) {\n      setCounter(counter - 1);\n      dispatch(subtractProductFromCart({\n        index: cartPageProducts.indexOf(product)\n      }));\n      dispatch(subtractFromAddedProducts({\n        count: 1,\n        price: product.price\n      }));\n    }\n  }; // handle changes in input \n\n\n  const handleChange = e => {\n    setValue(e.target.value);\n    setCounter(Number(e.target.value));\n  }; // return the product itself\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"elementCartBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cbName\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cpName\",\n        children: \"NAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 37\n      }, this), \": \", product.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plus__minus\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minusOne\",\n        onClick: decrease,\n        children: /*#__PURE__*/_jsxDEV(Minus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"result\",\n          value: counter,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plusOne\",\n        onClick: increase,\n        children: /*#__PURE__*/_jsxDEV(Plus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"arifmetix\",\n      children: [product.price, \"$ x \", counter, \" = \", sum, \"$\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnDelete\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteProduct(product.id, counter, sum),\n        children: /*#__PURE__*/_jsxDEV(Trash, {\n          className: \"trash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartBodyElement, \"6ds3m9bB2v6D8zF4V1u0o98kbwA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CartBodyElement;\nexport default CartBodyElement;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartBodyElement\");","map":{"version":3,"sources":["/home/marko/projects/ReactDevelop/react_app/src/components/CartPageComponents/CartBodyProduct/CartBodyElement.js"],"names":["React","useState","useDispatch","subtractProductFromCart","countGenerallyAddedProducts","subtractFromAddedProducts","addProductsToCartPage","CartBodyElement","props","dispatch","product","deleteProduct","cartPageProducts","count","forEach","productObj","counter","setCounter","value","setValue","sum","price","Number","increase","decrease","index","indexOf","handleChange","e","target","name","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n// Redux \nimport { useDispatch } from 'react-redux'\nimport {subtractProductFromCart, \n        countGenerallyAddedProducts,\n        subtractFromAddedProducts,\n        addProductsToCartPage } from '../../../features/productsSlice'\n\n// icons imports \nimport {ReactComponent as Plus} from '../../../assets/plus.svg'\nimport {ReactComponent as Minus} from '../../../assets/minus.svg'\nimport {ReactComponent as Trash} from '../../../assets/trash.svg'\n\n\n\nconst CartBodyElement = (props) => {\n    const dispatch = useDispatch()\n    const { product, deleteProduct, cartPageProducts } = props\n\n    // Count how many current product have been added  \n    let count = 0;\n    cartPageProducts.forEach(productObj => {\n        if(productObj === product) {\n            count += 1\n        }\n    })\n    // counter State and state for input \n    let [counter, setCounter] = useState(count)\n    let [value, setValue] = useState('') \n\n    let sum = product.price * Number(value);\n\n    // methods for adding and subtract the elements and also count them\n    const increase = () => {\n        if (counter >= 0) {\n            setCounter(counter + 1)\n            dispatch(countGenerallyAddedProducts({count: 1, price: product.price}))\n            dispatch(addProductsToCartPage({product: [product]}))\n        } \n    }\n    \n    const decrease = () => {\n        if (counter >= 1) {\n            setCounter(counter - 1)\n            dispatch(subtractProductFromCart({index: cartPageProducts.indexOf(product)}))\n            dispatch(subtractFromAddedProducts({count: 1, price: product.price}))\n        }\n    }\n    // handle changes in input \n    const handleChange = (e) => {\n        setValue(e.target.value)\n        setCounter(Number(e.target.value))\n    }\n    // return the product itself\n    return (\n        <div className=\"elementCartBody\">\n            <div className=\"cbName\"><div className=\"cpName\">NAME</div>: {product.name}</div>\n            <div className=\"plus__minus\">\n                <div className=\"minusOne\" onClick={decrease}><Minus /></div>\n                <div>\n                    <input className=\"result\" value={counter} onChange={handleChange} />\n                </div> \n                <div className=\"plusOne\" onClick={increase}><Plus /></div>\n            </div>\n            <div className=\"arifmetix\">\n                {product.price}$ x {counter} = {sum}$\n            </div>\n            <div className=\"btnDelete\">\n                <button onClick={() => deleteProduct(product.id, counter, sum)}>\n                    <Trash className=\"trash\" />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default CartBodyElement"]},"metadata":{},"sourceType":"module"}